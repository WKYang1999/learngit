<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd

        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--加载配置文件-->
    <context:property-placeholder location="classpath:sys.properties,classpath:db.properties" system-properties-mode="NEVER"></context:property-placeholder>

    <!-- 配置service的扫描路径 -->
    <context:component-scan base-package="com.neu.service"/>

    <!-- 上下文环境获取相关配置 -->
    <bean id="springContextUtil" class="com.neu.utils.SpringContextUtil" lazy-init="false"/>


    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${db.url}"></property>
        <property name="driverClassName" value="${db.driver}"></property>
        <property name="username" value="${db.username}"></property>
        <property name="password" value="${db.password}"></property>
    </bean>


    <!-- 配置事务处理 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
           <tx:method name="find*" read-only="true"/>
           <tx:method name="get*" read-only="true"/>
           <tx:method name="query*" read-only="true"/>
           <tx:method name="*" rollback-for="run"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
       <!-- 切入点 -->
       <aop:pointcut expression="execution(* com.neu.service.impl.*Impl.*(..))" id="pointcut"/>
       <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>

    <!-- 配置SqlSessionFactory -->
    <bean id="xx" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
    </bean>

    <!-- 作用
         a:会将指定包中的Mapper接口创建器代理对象并且交给容器来管理
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value="com.neu.mapper"/>
       <property name="sqlSessionFactoryBeanName" value="xx"/>
    </bean>
</beans>
